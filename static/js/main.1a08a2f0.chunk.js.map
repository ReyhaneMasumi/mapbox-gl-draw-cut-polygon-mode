{"version":3,"sources":["App.js","../../src/index.js","reportWebVitals.js","index.js"],"names":["map","draw","CutPolygonMode","onSetup","main","this","getSelected","f","toGeoJSON","onClick","state","e","cut","length","changeMode","modes","DRAW_POLYGON","once","events","CREATE","features","forEach","feature","idx","geometry","type","geojsonTypes","POLYGON","MULTI_POLYGON","afterCut","difference","newF","newFeature","id","addFeature","console","info","deleteFeature","silent","exitMode","getFeature","featureTarget","properties","onTap","toDisplayFeatures","geojson","display","onKeyUp","keyCode","SIMPLE_SELECT","App","mapboxGl","getRTLTextPluginStatus","setRTLTextPlugin","err","error","mapRef","useRef","useEffect","Map","container","current","style","center","zoom","pitch","interactive","hash","attributionControl","customAttribution","transformRequest","url","headers","MapboxDraw","cutPolygunMode","CutPolygunMode","userProperties","resize","addControl","set","coordinates","className","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a08a2f0.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport mapboxGl from 'mapbox-gl';\nimport MapboxDraw from '@mapbox/mapbox-gl-draw';\nimport '@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css';\nimport CutPolygunMode from 'mapbox-gl-draw-cut-polygon-mode';\nimport './App.css';\n\nlet map;\nlet draw;\n\nfunction App() {\n  if (mapboxGl.getRTLTextPluginStatus() === 'unavailable')\n    mapboxGl.setRTLTextPlugin(\n      'https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js',\n      (err) => {\n        err && console.error(err);\n      },\n      true\n    );\n  let mapRef = useRef(null);\n\n  useEffect(() => {\n    map = new mapboxGl.Map({\n      container: mapRef.current || '',\n      style: `https://map.ir/vector/styles/main/mapir-xyz-light-style.json`,\n      center: [51.3857, 35.6102],\n      zoom: 10,\n      pitch: 0,\n      interactive: true,\n      hash: true,\n      attributionControl: true,\n      customAttribution: '© Map © Openstreetmap',\n      transformRequest: (url) => {\n        return {\n          url: url,\n          headers: {\n            'x-api-key':\n              'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImRiZWU0YWU4OTk4OTA3MmQ3OTFmMjQ4ZDE5N2VhZTgwZWU2NTUyYjhlYjczOWI2NDdlY2YyYzIzNWRiYThiMzIzOTM5MDkzZDM0NTY2MmU3In0.eyJhdWQiOiI5NDMyIiwianRpIjoiZGJlZTRhZTg5OTg5MDcyZDc5MWYyNDhkMTk3ZWFlODBlZTY1NTJiOGViNzM5YjY0N2VjZjJjMjM1ZGJhOGIzMjM5MzkwOTNkMzQ1NjYyZTciLCJpYXQiOjE1OTA4MjU0NzIsIm5iZiI6MTU5MDgyNTQ3MiwiZXhwIjoxNTkzNDE3NDcyLCJzdWIiOiIiLCJzY29wZXMiOlsiYmFzaWMiXX0.M_z4xJlJRuYrh8RFe9UrW89Y_XBzpPth4yk3hlT-goBm8o3x8DGCrSqgskFfmJTUD2wC2qSoVZzQKB67sm-swtD5fkxZO7C0lBCMAU92IYZwCdYehIOtZbP5L1Lfg3C6pxd0r7gQOdzcAZj9TStnKBQPK3jSvzkiHIQhb6I0sViOS_8JceSNs9ZlVelQ3gs77xM2ksWDM6vmqIndzsS-5hUd-9qdRDTLHnhdbS4_UBwNDza47Iqd5vZkBgmQ_oDZ7dVyBuMHiQFg28V6zhtsf3fijP0UhePCj4GM89g3tzYBOmuapVBobbX395FWpnNC3bYg7zDaVHcllSUYDjGc1A', //dev api key\n            'Mapir-SDK': 'reactjs',\n          },\n        };\n      },\n    });\n    draw = new MapboxDraw({\n      modes: {\n        ...MapboxDraw.modes,\n        cutPolygunMode: CutPolygunMode,\n      },\n      userProperties: true,\n    });\n    map.once('load', () => {\n      map.resize();\n      map.addControl(draw, 'top-right');\n      draw.set({\n        type: 'FeatureCollection',\n        features: [\n          {\n            type: 'Feature',\n            properties: {},\n            id: 'example-id',\n            geometry: {\n              type: 'Polygon',\n              coordinates: [\n                [\n                  [51.41742415918904, 35.73019558439101],\n                  [51.31319413385742, 35.702773908694724],\n                  [51.378997493472525, 35.665562843119986],\n                  [51.45008537540798, 35.67776544979942],\n                  [51.46619566741822, 35.70822028156377],\n                  [51.41742415918904, 35.73019558439101],\n                ],\n              ],\n            },\n          },\n        ],\n      });\n    });\n  }, []);\n\n  return (\n    <div className=\"map-wrapper\">\n      <button\n        onClick={() => {\n          draw?.changeMode('cutPolygunMode');\n        }}\n      >\n        cut\n      </button>\n      <div id=\"map\" ref={mapRef} />\n    </div>\n  );\n}\n\nexport default App;\n","import {\n  geojsonTypes,\n  modes,\n  events,\n} from '@mapbox/mapbox-gl-draw/src/constants';\nimport difference from '@turf/difference';\n\nconst CutPolygonMode = {\n  onSetup: function () {\n    let main = this.getSelected().map((f) => f.toGeoJSON());\n    const state = {\n      main,\n    };\n    return state;\n  },\n\n  onClick: function (state, e) {\n    // console.log(\n    //   'e',\n    //   this.getFeature(e.featureTarget.properties.id).toGeoJSON()\n    // );\n    if (state.main.length > 0) {\n      this.changeMode(modes.DRAW_POLYGON);\n      let cut;\n      this.map.once(events.CREATE, (e) => {\n        cut = e.features[0];\n        state.main.forEach((feature, idx) => {\n          if (\n            feature.geometry.type === geojsonTypes.POLYGON ||\n            feature.geometry.type === geojsonTypes.MULTI_POLYGON\n          ) {\n            let afterCut = difference(feature, cut);\n            let newF = this.newFeature(afterCut);\n            newF.id = feature.id;\n            this.addFeature(newF);\n          } else {\n            console.info('The feature is not Polygon/MultiPolygon!');\n          }\n        });\n        this.deleteFeature([cut.id], { silent: true });\n        this.exitMode();\n      });\n    } else {\n      state.main = this.getFeature(e.featureTarget.properties.id).toGeoJSON();\n      let cut;\n      this.changeMode(modes.DRAW_POLYGON);\n      this.map.once(events.CREATE, (e) => {\n        cut = e.features[0];\n        if (\n          state.main.geometry.type === geojsonTypes.POLYGON ||\n          state.main.geometry.type === geojsonTypes.MULTI_POLYGON\n        ) {\n          let afterCut = difference(state.main, cut);\n          let newF = this.newFeature(afterCut);\n          this.deleteFeature([cut.id], { silent: true });\n          newF.id = state.main.id;\n          this.addFeature(newF);\n        } else {\n          console.info('The feature is not Polygon/MultiPolygon!');\n        }\n        // console.info('Please Select a feature/features.');\n        this.exitMode();\n      });\n      // this.exitMode();\n    }\n  },\n\n  onTap: function (state, e) {\n    if (state.main.length > 0) {\n      this.changeMode(modes.DRAW_POLYGON);\n      let cut;\n      this.map.once(events.CREATE, (e) => {\n        cut = e.features[0];\n        state.main.forEach((feature, idx) => {\n          if (\n            feature.geometry.type === geojsonTypes.POLYGON ||\n            feature.geometry.type === geojsonTypes.MULTI_POLYGON\n          ) {\n            let afterCut = difference(feature, cut);\n            let newF = this.newFeature(afterCut);\n            newF.id = feature.id;\n            this.addFeature(newF);\n          } else {\n            console.info('The feature is not Polygon/MultiPolygon!');\n          }\n        });\n        this.deleteFeature([cut.id], { silent: true });\n        this.exitMode();\n      });\n    } else {\n      state.main = this.getFeature(e.featureTarget.properties.id).toGeoJSON();\n      let cut;\n      this.changeMode(modes.DRAW_POLYGON);\n      this.map.once(events.CREATE, (e) => {\n        cut = e.features[0];\n        if (\n          state.main.geometry.type === geojsonTypes.POLYGON ||\n          state.main.geometry.type === geojsonTypes.MULTI_POLYGON\n        ) {\n          let afterCut = difference(state.main, cut);\n          let newF = this.newFeature(afterCut);\n          this.deleteFeature([cut.id], { silent: true });\n          newF.id = state.main.id;\n          this.addFeature(newF);\n        } else {\n          console.info('The feature is not Polygon/MultiPolygon!');\n        }\n        this.exitMode();\n      });\n    }\n  },\n\n  toDisplayFeatures: function (state, geojson, display) {\n    display(geojson);\n  },\n\n  onKeyUp: function (state, e) {\n    if (e.keyCode === 27) return this.exitMode();\n  },\n\n  exitMode: function (state, e) {\n    return this.changeMode(modes.SIMPLE_SELECT);\n  },\n};\n\nexport default CutPolygonMode;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}