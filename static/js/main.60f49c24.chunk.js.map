{"version":3,"sources":["../../src/index.js","App.js","reportWebVitals.js","index.js"],"names":["SplitPolygonMode","main","this","getSelected","filter","f","type","map","toGeoJSON","length","Error","state","geojson","display","changeMode","cuttingpolygon","forEach","feature","idx","geometry","geojsonTypes","POLYGON","MULTI_POLYGON","afterCut","difference","newF","newFeature","id","deleteFeature","addFeature","fireUpdate","console","info","fire","events","UPDATE","action","updateActions","CHANGE_COORDINATES","features","onTouchEnd","onMouseUp","draw","drawBar","extendDrawBar","opt","ctrl","buttons","onAddOrig","onAdd","onRemoveOrig","onRemove","elContainer","b","addButton","removeButton","elButton","document","createElement","className","classes","Array","c","classList","add","addEventListener","on","appendChild","removeEventListener","remove","App","mapboxGl","getRTLTextPluginStatus","setRTLTextPlugin","err","error","mapRef","useRef","useEffect","Map","container","current","style","center","zoom","pitch","interactive","hash","attributionControl","customAttribution","transformRequest","url","headers","MapboxDraw","modes","cutPolygonMode","CutPolygonMode","passing_mode_polygon","mapboxGlDrawPassingMode","draw_polygon","userProperties","splitPolygon","once","resize","addControl","set","properties","coordinates","e","log","alert","message","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.60f49c24.chunk.js","sourcesContent":["import { geojsonTypes, updateActions, events } from \"@mapbox/mapbox-gl-draw/src/constants\";\nimport difference from \"@turf/difference\";\n\nconst SplitPolygonMode = {};\n\nSplitPolygonMode.onSetup = function () {\n  let main = this.getSelected()\n    .filter((f) => f.type === \"Polygon\" || f.type === \"MultiPolygon\")\n    .map((f) => f.toGeoJSON());\n\n  if (main.length < 1) {\n    throw new Error(\n      \"Please select a feature/features (Polygon or MultiPolygon) to split!\"\n    );\n  }\n\n  return {\n    main,\n  };\n};\n\nSplitPolygonMode.toDisplayFeatures = function (state, geojson, display) {\n  display(geojson);\n\n  this.changeMode(\"passing_mode_polygon\", (cuttingpolygon) => {\n    state.main.forEach((feature, idx) => {\n      if (\n        feature.geometry.type === geojsonTypes.POLYGON ||\n        feature.geometry.type === geojsonTypes.MULTI_POLYGON\n      ) {\n        let afterCut = difference(feature, cuttingpolygon);\n        let newF = this.newFeature(afterCut);\n        newF.id = feature.id;\n        this.deleteFeature(feature.id);\n        this.addFeature(newF);\n        this.fireUpdate();\n      } else {\n        console.info(\"The feature is not Polygon/MultiPolygon!\");\n      }\n    });\n  });\n};\n\nSplitPolygonMode.fireUpdate = function() {\n    this.map.fire(events.UPDATE, {\n        action: updateActions.CHANGE_COORDINATES,\n        features: this.getSelected().map(f => f.toGeoJSON())\n    });\n};\nSplitPolygonMode.onMouseOut = function(state) {\n  // As soon as you mouse leaves the canvas, update the feature\n  // if (state.dragMoving) {\n      this.fireUpdate();\n  // }\n};\n\nSplitPolygonMode.onTouchEnd = SplitPolygonMode.onMouseUp = function(state) {\n  // if (state.dragMoving) {\n      this.fireUpdate();\n  // }\n  // this.stopDragging(state);\n};\n\nexport default SplitPolygonMode;\n","import React, { useRef, useEffect } from \"react\";\nimport mapboxGl from \"mapbox-gl\";\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport \"@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css\";\nimport CutPolygonMode from \"mapbox-gl-draw-cut-polygon-mode\";\nimport mapboxGlDrawPassingMode from \"mapbox-gl-draw-passing-mode\";\nimport \"./App.css\";\n\nlet map;\nlet draw;\nlet drawBar;\n\nclass extendDrawBar {\n  constructor(opt) {\n    let ctrl = this;\n    ctrl.draw = opt.draw;\n    ctrl.buttons = opt.buttons || [];\n    ctrl.onAddOrig = opt.draw.onAdd;\n    ctrl.onRemoveOrig = opt.draw.onRemove;\n  }\n  onAdd(map) {\n    let ctrl = this;\n    ctrl.map = map;\n    ctrl.elContainer = ctrl.onAddOrig(map);\n    ctrl.buttons.forEach((b) => {\n      ctrl.addButton(b);\n    });\n    return ctrl.elContainer;\n  }\n  onRemove(map) {\n    let ctrl = this;\n    ctrl.buttons.forEach((b) => {\n      ctrl.removeButton(b);\n    });\n    ctrl.onRemoveOrig(map);\n  }\n  addButton(opt) {\n    let ctrl = this;\n    var elButton = document.createElement(\"button\");\n    elButton.className = \"mapbox-gl-draw_ctrl-draw-btn\";\n    if (opt.classes instanceof Array) {\n      opt.classes.forEach((c) => {\n        elButton.classList.add(c);\n      });\n    }\n    elButton.addEventListener(opt.on, opt.action);\n    ctrl.elContainer.appendChild(elButton);\n    opt.elButton = elButton;\n  }\n  removeButton(opt) {\n    opt.elButton.removeEventListener(opt.on, opt.action);\n    opt.elButton.remove();\n  }\n}\n\nfunction App() {\n  if (mapboxGl.getRTLTextPluginStatus() === \"unavailable\")\n    mapboxGl.setRTLTextPlugin(\n      \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js\",\n      (err) => {\n        err && console.error(err);\n      },\n      true\n    );\n  let mapRef = useRef(null);\n\n  useEffect(() => {\n    map = new mapboxGl.Map({\n      container: mapRef.current || \"\",\n      style: `https://map.ir/vector/styles/main/mapir-xyz-light-style.json`,\n      center: [51.3857, 35.6102],\n      zoom: 10,\n      pitch: 0,\n      interactive: true,\n      hash: true,\n      attributionControl: true,\n      customAttribution: \"© Map © Openstreetmap\",\n      transformRequest: (url) => {\n        return {\n          url: url,\n          headers: {\n            \"x-api-key\":\n              \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImRiZWU0YWU4OTk4OTA3MmQ3OTFmMjQ4ZDE5N2VhZTgwZWU2NTUyYjhlYjczOWI2NDdlY2YyYzIzNWRiYThiMzIzOTM5MDkzZDM0NTY2MmU3In0.eyJhdWQiOiI5NDMyIiwianRpIjoiZGJlZTRhZTg5OTg5MDcyZDc5MWYyNDhkMTk3ZWFlODBlZTY1NTJiOGViNzM5YjY0N2VjZjJjMjM1ZGJhOGIzMjM5MzkwOTNkMzQ1NjYyZTciLCJpYXQiOjE1OTA4MjU0NzIsIm5iZiI6MTU5MDgyNTQ3MiwiZXhwIjoxNTkzNDE3NDcyLCJzdWIiOiIiLCJzY29wZXMiOlsiYmFzaWMiXX0.M_z4xJlJRuYrh8RFe9UrW89Y_XBzpPth4yk3hlT-goBm8o3x8DGCrSqgskFfmJTUD2wC2qSoVZzQKB67sm-swtD5fkxZO7C0lBCMAU92IYZwCdYehIOtZbP5L1Lfg3C6pxd0r7gQOdzcAZj9TStnKBQPK3jSvzkiHIQhb6I0sViOS_8JceSNs9ZlVelQ3gs77xM2ksWDM6vmqIndzsS-5hUd-9qdRDTLHnhdbS4_UBwNDza47Iqd5vZkBgmQ_oDZ7dVyBuMHiQFg28V6zhtsf3fijP0UhePCj4GM89g3tzYBOmuapVBobbX395FWpnNC3bYg7zDaVHcllSUYDjGc1A\", //dev api key\n            \"Mapir-SDK\": \"reactjs\",\n          },\n        };\n      },\n    });\n    draw = new MapboxDraw({\n      modes: {\n        ...MapboxDraw.modes,\n        cutPolygonMode: CutPolygonMode,\n        passing_mode_polygon: mapboxGlDrawPassingMode(\n          MapboxDraw.modes.draw_polygon\n        ),\n      },\n      userProperties: true,\n    });\n    drawBar = new extendDrawBar({\n      draw: draw,\n      buttons: [\n        {\n          on: \"click\",\n          action: splitPolygon,\n          classes: [\"split-icon\"],\n        },\n      ],\n    });\n    map.once(\"load\", () => {\n      map.resize();\n      map.addControl(drawBar, \"top-right\");\n      draw.set({\n        type: \"FeatureCollection\",\n        features: [\n          {\n            type: \"Feature\",\n            properties: {},\n            id: \"example-id\",\n            geometry: {\n              type: \"Polygon\",\n              coordinates: [\n                [\n                  [51.41742415918904, 35.73019558439101],\n                  [51.31319413385742, 35.702773908694724],\n                  [51.378997493472525, 35.665562843119986],\n                  [51.45008537540798, 35.67776544979942],\n                  [51.46619566741822, 35.70822028156377],\n                  [51.41742415918904, 35.73019558439101],\n                ],\n              ],\n            },\n          },\n        ],\n      });\n      map.on('draw.update', function (e) {console.log(e)})\n    });\n  }, []);\n\n  const splitPolygon = () => {\n    try {\n      draw?.changeMode(\"cutPolygonMode\");\n    } catch (err) {\n      alert(err.message);\n      console.error(err);\n    }\n  };\n\n  return (\n    <div className=\"map-wrapper\">\n      <div id=\"map\" ref={mapRef} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}